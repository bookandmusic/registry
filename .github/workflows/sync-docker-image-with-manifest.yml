name: Multi-Arch Image Replication to GHCR with Manifest

on:
  workflow_dispatch:
    inputs:
      source_image:
        description: 'Docker Hub 镜像名称 (例如: nginx 或 library/nginx)'
        required: true
        default: 'nginx'
      source_tag:
        description: 'Docker Hub 镜像标签 (例如: 1.25.1)'
        required: true
        default: 'latest'
      arch_list:
        description: '目标架构列表 (例如: amd64,arm64)'
        required: true
        default: 'amd64,arm64'

jobs:
  replicate:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Set Variables
        id: vars
        run: |
          # 处理源镜像名称（Docker Hub）
          SOURCE_IMAGE_INPUT="${{ github.event.inputs.source_image }}"
          
          # 为 Docker Hub 拉取准备完整的镜像路径
          if [[ "$SOURCE_IMAGE_INPUT" != *"/"* ]]; then
            # 如果没有命名空间，补全 library
            SOURCE_IMAGE_FULL="library/$SOURCE_IMAGE_INPUT"
          else
            SOURCE_IMAGE_FULL="$SOURCE_IMAGE_INPUT"
          fi
          
          # 提取纯镜像名称（去掉命名空间，用于 GHCR 推送）
          IMAGE_NAME=$(echo "$SOURCE_IMAGE_FULL" | awk -F '/' '{print $NF}')
          
          # 设置目标镜像名称（GHCR，直接使用用户名/镜像名，不包含仓库名）
          TARGET_IMAGE="ghcr.io/${{ github.actor }}/$IMAGE_NAME"
          TARGET_TAG="${{ github.event.inputs.source_tag }}"
          
          if [ -z "$TARGET_TAG" ]; then
            TARGET_TAG="latest"
          fi

          echo "SOURCE_IMAGE_FULL=$SOURCE_IMAGE_FULL" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "TARGET_IMAGE=$TARGET_IMAGE" >> $GITHUB_OUTPUT
          echo "TARGET_TAG=$TARGET_TAG" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (GitHub Container Registry)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, Tag, and Push Individual Architectures
        id: arch_processing
        run: |
          SOURCE_IMAGE_FULL="${{ steps.vars.outputs.SOURCE_IMAGE_FULL }}"
          TARGET_IMAGE="${{ steps.vars.outputs.TARGET_IMAGE }}"
          TARGET_TAG="${{ steps.vars.outputs.TARGET_TAG }}"
          ARCH_LIST="${{ github.event.inputs.arch_list }}"
          
          MANIFEST_IMAGES=""
          TEMP_TAGS=""

          IFS=',' read -ra ADDR <<< "$ARCH_LIST"
          for arch in "${ADDR[@]}"; do
            SAFE_ARCH="${arch//\//-}"
            TEMP_FULL_TAG="$TARGET_IMAGE:${TARGET_TAG}-${SAFE_ARCH}"
            
            docker pull --platform "linux/$arch" "docker.io/$SOURCE_IMAGE_FULL"
            docker tag "docker.io/$SOURCE_IMAGE_FULL" "$TEMP_FULL_TAG"
            docker push "$TEMP_FULL_TAG"
            
            MANIFEST_IMAGES="$MANIFEST_IMAGES $TEMP_FULL_TAG"
            TEMP_TAGS="$TEMP_TAGS $TEMP_FULL_TAG"
          done
          
          echo "MANIFEST_IMAGES=$MANIFEST_IMAGES" >> $GITHUB_OUTPUT
          echo "TEMP_TAGS=$TEMP_TAGS" >> $GITHUB_OUTPUT

      - name: Create and Push Multi-Arch Manifest List
        run: |
          TARGET_IMAGE="${{ steps.vars.outputs.TARGET_IMAGE }}"
          TARGET_TAG="${{ steps.vars.outputs.TARGET_TAG }}"
          TARGET_IMAGE_TAG="${TARGET_IMAGE}:${TARGET_TAG}"
          
          docker manifest create $TARGET_IMAGE_TAG ${{ steps.arch_processing.outputs.MANIFEST_IMAGES }}
          docker manifest push $TARGET_IMAGE_TAG
          
          echo "✅ Multi-Arch 镜像已成功推送到: $TARGET_IMAGE_TAG"
